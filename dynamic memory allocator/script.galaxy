static bool systemEnabled = true;

int delegate(int data) { return 0; }

//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - memory address initialization
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
    static int 		[MEMORY_TYPE_COUNT] memoryTypeStartAddress;
    static int 		[MEMORY_TYPE_COUNT] memoryTypeSize;
    static string 	[MEMORY_TYPE_COUNT] memoryTypeName;

    static void initializeMemoryTypeAddresses() {
        memoryTypeStartAddress[MEMORY_TYPE_ABILCMD]             = 1;                                                                                            //abilcmd
        memoryTypeStartAddress[MEMORY_TYPE_AIFILTER]            = memoryTypeStartAddress[MEMORY_TYPE_ABILCMD]               + MEMORY_SIZE_ABILCMD;              //aifilter
        memoryTypeStartAddress[MEMORY_TYPE_ACTOR]               = memoryTypeStartAddress[MEMORY_TYPE_AIFILTER]              + MEMORY_SIZE_AIFILTER;             //actor
        memoryTypeStartAddress[MEMORY_TYPE_BOOL]                = memoryTypeStartAddress[MEMORY_TYPE_ACTOR]                 + MEMORY_SIZE_ACTOR;                //bool
        memoryTypeStartAddress[MEMORY_TYPE_BANK]                = memoryTypeStartAddress[MEMORY_TYPE_BOOL]                  + MEMORY_SIZE_BOOL;                 //bank
        memoryTypeStartAddress[MEMORY_TYPE_BYTE]                = memoryTypeStartAddress[MEMORY_TYPE_BANK]                  + MEMORY_SIZE_BANK;                 //byte
        memoryTypeStartAddress[MEMORY_TYPE_CAMERAINFO]          = memoryTypeStartAddress[MEMORY_TYPE_BYTE]                  + MEMORY_SIZE_BYTE;                 //camerainfo
        memoryTypeStartAddress[MEMORY_TYPE_COLOR]               = memoryTypeStartAddress[MEMORY_TYPE_CAMERAINFO]            + MEMORY_SIZE_CAMERAINFO;           //color
        memoryTypeStartAddress[MEMORY_TYPE_DOODAD]              = memoryTypeStartAddress[MEMORY_TYPE_COLOR]                 + MEMORY_SIZE_COLOR;                //doodad
        memoryTypeStartAddress[MEMORY_TYPE_FIXED]               = memoryTypeStartAddress[MEMORY_TYPE_DOODAD]                + MEMORY_SIZE_DOODAD;               //fixed
        memoryTypeStartAddress[MEMORY_TYPE_INT]                 = memoryTypeStartAddress[MEMORY_TYPE_FIXED]                 + MEMORY_SIZE_FIXED;                //int
        memoryTypeStartAddress[MEMORY_TYPE_MARKER]              = memoryTypeStartAddress[MEMORY_TYPE_INT]                   + MEMORY_SIZE_INT;                  //marker
        memoryTypeStartAddress[MEMORY_TYPE_ORDER]               = memoryTypeStartAddress[MEMORY_TYPE_MARKER]                + MEMORY_SIZE_MARKER;               //order
        memoryTypeStartAddress[MEMORY_TYPE_PLAYERGROUP]         = memoryTypeStartAddress[MEMORY_TYPE_ORDER]                 + MEMORY_SIZE_ORDER;                //playergroup
        memoryTypeStartAddress[MEMORY_TYPE_POINT]               = memoryTypeStartAddress[MEMORY_TYPE_PLAYERGROUP]           + MEMORY_SIZE_PLAYERGROUP;          //point
        memoryTypeStartAddress[MEMORY_TYPE_REGION]              = memoryTypeStartAddress[MEMORY_TYPE_POINT]                 + MEMORY_SIZE_POINT;                //region
        memoryTypeStartAddress[MEMORY_TYPE_SOUND]               = memoryTypeStartAddress[MEMORY_TYPE_REGION]                + MEMORY_SIZE_REGION;               //sound
        memoryTypeStartAddress[MEMORY_TYPE_SOUNDLINK]           = memoryTypeStartAddress[MEMORY_TYPE_SOUND]                 + MEMORY_SIZE_SOUND;                //soundlink
        memoryTypeStartAddress[MEMORY_TYPE_STRING]              = memoryTypeStartAddress[MEMORY_TYPE_SOUNDLINK]             + MEMORY_SIZE_SOUNDLINK;            //string
        memoryTypeStartAddress[MEMORY_TYPE_TEXT]                = memoryTypeStartAddress[MEMORY_TYPE_STRING]                + MEMORY_SIZE_STRING;               //text
        memoryTypeStartAddress[MEMORY_TYPE_TIMER]               = memoryTypeStartAddress[MEMORY_TYPE_TEXT]                  + MEMORY_SIZE_TEXT;                 //timer
        memoryTypeStartAddress[MEMORY_TYPE_TRANSMISSIONSOURCE]  = memoryTypeStartAddress[MEMORY_TYPE_TIMER]                 + MEMORY_SIZE_TIMER;                //transmissionsource
        memoryTypeStartAddress[MEMORY_TYPE_TRIGGER]             = memoryTypeStartAddress[MEMORY_TYPE_TRANSMISSIONSOURCE]    + MEMORY_SIZE_TRANSMISSIONSOURCE;   //trigger
        memoryTypeStartAddress[MEMORY_TYPE_UNIT]                = memoryTypeStartAddress[MEMORY_TYPE_TRIGGER]               + MEMORY_SIZE_TRIGGER;              //unit
        memoryTypeStartAddress[MEMORY_TYPE_UNITFILTER]          = memoryTypeStartAddress[MEMORY_TYPE_UNIT]                  + MEMORY_SIZE_UNIT;                 //unitfilter
        memoryTypeStartAddress[MEMORY_TYPE_UNITGROUP]           = memoryTypeStartAddress[MEMORY_TYPE_UNITFILTER]            + MEMORY_SIZE_UNITFILTER;           //unitgroup
        memoryTypeStartAddress[MEMORY_TYPE_UNITREF]             = memoryTypeStartAddress[MEMORY_TYPE_UNITGROUP]             + MEMORY_SIZE_UNITGROUP;            //unitref
        memoryTypeStartAddress[MEMORY_TYPE_REVEALER]            = memoryTypeStartAddress[MEMORY_TYPE_UNITREF]               + MEMORY_SIZE_UNITREF;              //revealer
        memoryTypeStartAddress[MEMORY_TYPE_WAVE]                = memoryTypeStartAddress[MEMORY_TYPE_REVEALER]              + MEMORY_SIZE_REVEALER;             //wave
        memoryTypeStartAddress[MEMORY_TYPE_WAVEINFO]            = memoryTypeStartAddress[MEMORY_TYPE_WAVE]                  + MEMORY_SIZE_WAVE;                 //waveinfo
        memoryTypeStartAddress[MEMORY_TYPE_WAVETARGET]          = memoryTypeStartAddress[MEMORY_TYPE_WAVEINFO]              + MEMORY_SIZE_WAVEINFO;             //wavetarget
        memoryTypeStartAddress[MEMORY_TYPE_DELEGATE]            = memoryTypeStartAddress[MEMORY_TYPE_WAVETARGET]            + MEMORY_SIZE_WAVETARGET;           //funcref<func>

        memoryTypeSize[MEMORY_TYPE_ABILCMD]             = MEMORY_SIZE_ABILCMD;              //abilcmd
        memoryTypeSize[MEMORY_TYPE_AIFILTER]            = MEMORY_SIZE_AIFILTER;             //aifilter
        memoryTypeSize[MEMORY_TYPE_ACTOR]               = MEMORY_SIZE_ACTOR;                //actor
        memoryTypeSize[MEMORY_TYPE_BOOL]                = MEMORY_SIZE_BOOL;                 //bool
        memoryTypeSize[MEMORY_TYPE_BANK]                = MEMORY_SIZE_BANK;                 //bank
        memoryTypeSize[MEMORY_TYPE_BYTE]                = MEMORY_SIZE_BYTE;                 //byte
        memoryTypeSize[MEMORY_TYPE_CAMERAINFO]          = MEMORY_SIZE_CAMERAINFO;           //camerainfo
        memoryTypeSize[MEMORY_TYPE_COLOR]               = MEMORY_SIZE_COLOR;                //color
        memoryTypeSize[MEMORY_TYPE_DOODAD]              = MEMORY_SIZE_DOODAD;               //doodad
        memoryTypeSize[MEMORY_TYPE_FIXED]               = MEMORY_SIZE_FIXED;                //fixed
        memoryTypeSize[MEMORY_TYPE_INT]                 = MEMORY_SIZE_INT;                  //int
        memoryTypeSize[MEMORY_TYPE_MARKER]              = MEMORY_SIZE_MARKER;               //marker
        memoryTypeSize[MEMORY_TYPE_ORDER]               = MEMORY_SIZE_ORDER;                //order
        memoryTypeSize[MEMORY_TYPE_PLAYERGROUP]         = MEMORY_SIZE_PLAYERGROUP;          //playergroup
        memoryTypeSize[MEMORY_TYPE_POINT]               = MEMORY_SIZE_POINT;                //point
        memoryTypeSize[MEMORY_TYPE_REGION]              = MEMORY_SIZE_REGION;               //region
        memoryTypeSize[MEMORY_TYPE_SOUND]               = MEMORY_SIZE_SOUND;                //sound
        memoryTypeSize[MEMORY_TYPE_SOUNDLINK]           = MEMORY_SIZE_SOUNDLINK;            //soundlink
        memoryTypeSize[MEMORY_TYPE_STRING]              = MEMORY_SIZE_STRING;               //string
        memoryTypeSize[MEMORY_TYPE_TEXT]                = MEMORY_SIZE_TEXT;                 //text
        memoryTypeSize[MEMORY_TYPE_TIMER]               = MEMORY_SIZE_TIMER;                //timer
        memoryTypeSize[MEMORY_TYPE_TRANSMISSIONSOURCE]  = MEMORY_SIZE_TRANSMISSIONSOURCE;   //transmissionsource
        memoryTypeSize[MEMORY_TYPE_TRIGGER]             = MEMORY_SIZE_TRIGGER;              //trigger
        memoryTypeSize[MEMORY_TYPE_UNIT]                = MEMORY_SIZE_UNIT;                 //unit
        memoryTypeSize[MEMORY_TYPE_UNITFILTER]          = MEMORY_SIZE_UNITFILTER;           //unitfilter
        memoryTypeSize[MEMORY_TYPE_UNITGROUP]           = MEMORY_SIZE_UNITGROUP;            //unitgroup
        memoryTypeSize[MEMORY_TYPE_UNITREF]             = MEMORY_SIZE_UNITREF;              //unitref
        memoryTypeSize[MEMORY_TYPE_REVEALER]            = MEMORY_SIZE_REVEALER;             //revealer
        memoryTypeSize[MEMORY_TYPE_WAVE]                = MEMORY_SIZE_WAVE;                 //wave
        memoryTypeSize[MEMORY_TYPE_WAVEINFO]            = MEMORY_SIZE_WAVEINFO;             //waveinfo
        memoryTypeSize[MEMORY_TYPE_WAVETARGET]          = MEMORY_SIZE_WAVETARGET;           //wavetarget
        memoryTypeSize[MEMORY_TYPE_DELEGATE]            = MEMORY_SIZE_DELEGATE;             //funcref<delegate>

        memoryTypeName[MEMORY_TYPE_ABILCMD]             = "abilcmd";              //abilcmd
        memoryTypeName[MEMORY_TYPE_AIFILTER]            = "aifilter";             //aifilter
        memoryTypeName[MEMORY_TYPE_ACTOR]               = "actor";                //actor
        memoryTypeName[MEMORY_TYPE_BOOL]                = "bool";                 //bool
        memoryTypeName[MEMORY_TYPE_BANK]                = "bank";                 //bank
        memoryTypeName[MEMORY_TYPE_BYTE]                = "byte";                 //byte
        memoryTypeName[MEMORY_TYPE_CAMERAINFO]          = "camerainfo";           //camerainfo
        memoryTypeName[MEMORY_TYPE_COLOR]               = "color";                //color
        memoryTypeName[MEMORY_TYPE_DOODAD]              = "doodad";               //doodad
        memoryTypeName[MEMORY_TYPE_FIXED]               = "fixed";                //fixed
        memoryTypeName[MEMORY_TYPE_INT]                 = "int";                  //int
        memoryTypeName[MEMORY_TYPE_MARKER]              = "marker";               //marker
        memoryTypeName[MEMORY_TYPE_ORDER]               = "order";                //order
        memoryTypeName[MEMORY_TYPE_PLAYERGROUP]         = "playergroup";          //playergroup
        memoryTypeName[MEMORY_TYPE_POINT]               = "point";                //point
        memoryTypeName[MEMORY_TYPE_REGION]              = "region";               //region
        memoryTypeName[MEMORY_TYPE_SOUND]               = "sound";                //sound
        memoryTypeName[MEMORY_TYPE_SOUNDLINK]           = "soundlink";            //soundlink
        memoryTypeName[MEMORY_TYPE_STRING]              = "string";               //string
        memoryTypeName[MEMORY_TYPE_TEXT]                = "text";                 //text
        memoryTypeName[MEMORY_TYPE_TIMER]               = "timer";                //timer
        memoryTypeName[MEMORY_TYPE_TRANSMISSIONSOURCE]  = "transmissionsource";   //transmissionsource
        memoryTypeName[MEMORY_TYPE_TRIGGER]             = "trigger";              //trigger
        memoryTypeName[MEMORY_TYPE_UNIT]                = "unit";                 //unit
        memoryTypeName[MEMORY_TYPE_UNITFILTER]          = "unitfilter";           //unitfilter
        memoryTypeName[MEMORY_TYPE_UNITGROUP]           = "unitgroup";            //unitgroup
        memoryTypeName[MEMORY_TYPE_UNITREF]             = "unitref";              //unitref
        memoryTypeName[MEMORY_TYPE_REVEALER]            = "revealer";             //revealer
        memoryTypeName[MEMORY_TYPE_WAVE]                = "wave";                 //wave
        memoryTypeName[MEMORY_TYPE_WAVEINFO]            = "waveinfo";             //waveinfo
        memoryTypeName[MEMORY_TYPE_WAVETARGET]          = "wavetarget";           //wavetarget
        memoryTypeName[MEMORY_TYPE_DELEGATE]            = "delegate";             //delegate
    } //initializeMemoryTypeAddresses
	
    int getMemoryType(int pointer) {
        int min = 0;
        int max = MEMORY_TYPE_COUNT - 1;
        int mid;
		
        while (min < max) {
            mid = (min + max) >> 1;

            if (pointer >= memoryTypeStartAddress[mid] + memoryTypeSize[mid]) {
                min = mid + 1;
            } //if
            else {
                max = mid;
            } //else
        } //while

        if (max  == min && pointer < memoryTypeStartAddress[min] + memoryTypeSize[min] && pointer >= memoryTypeStartAddress[min]) {
            return min;
        } //if
        
        return -1;
    } //getMemoryType
	
//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - pointer manipulation
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
    //used to manipulate memory blocks directly
    int getMemoryBlockAddress(int pointer, int memoryType)          { return pointer - memoryTypeStartAddress[memoryType]; }
    int getPointerAddress(int memoryBlockAddress, int memoryType)   { return memoryBlockAddress + memoryTypeStartAddress[memoryType]; }
	
    int         sizeof  (int pointer)               { return    DataTableGetInt(true, "MEMORY_ARR_SIZE" + IntToString(pointer)); }
    static void setSize (int pointer, int size)     {           DataTableSetInt(true, "MEMORY_ARR_SIZE" + IntToString(pointer), size); }
	
//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - memory read/write
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
    abilcmd             readAbilcmd             (int pointer) { return memoryAbilcmd            [getMemoryBlockAddress(pointer, MEMORY_TYPE_ABILCMD)]; }
    aifilter            readAifilter            (int pointer) { return memoryAifilter           [getMemoryBlockAddress(pointer, MEMORY_TYPE_AIFILTER)]; }
    actor               readActor               (int pointer) { return memoryActor              [getMemoryBlockAddress(pointer, MEMORY_TYPE_ACTOR)]; }
    bool                readBool                (int pointer) { return memoryBool               [getMemoryBlockAddress(pointer, MEMORY_TYPE_BOOL)]; }
    bank                readBank                (int pointer) { return memoryBank               [getMemoryBlockAddress(pointer, MEMORY_TYPE_BANK)]; }
    byte                readByte                (int pointer) { return memoryByte               [getMemoryBlockAddress(pointer, MEMORY_TYPE_BYTE)]; }
    camerainfo          readCamerainfo          (int pointer) { return memoryCamerainfo         [getMemoryBlockAddress(pointer, MEMORY_TYPE_CAMERAINFO)]; }
    color               readColor               (int pointer) { return memoryColor              [getMemoryBlockAddress(pointer, MEMORY_TYPE_COLOR)]; }
    doodad              readDoodad              (int pointer) { return memoryDoodad             [getMemoryBlockAddress(pointer, MEMORY_TYPE_DOODAD)]; }
    fixed               readFixed               (int pointer) { return memoryFixed              [getMemoryBlockAddress(pointer, MEMORY_TYPE_FIXED)]; }
    int                 readInt                 (int pointer) { return memoryInt                [getMemoryBlockAddress(pointer, MEMORY_TYPE_INT)]; }
    marker              readMarker              (int pointer) { return memoryMarker             [getMemoryBlockAddress(pointer, MEMORY_TYPE_MARKER)]; }
    order               readOrder               (int pointer) { return memoryOrder              [getMemoryBlockAddress(pointer, MEMORY_TYPE_ORDER)]; }
    playergroup         readPlayergroup         (int pointer) { return memoryPlayergroup        [getMemoryBlockAddress(pointer, MEMORY_TYPE_PLAYERGROUP)]; }
    point               readPoint               (int pointer) { return memoryPoint              [getMemoryBlockAddress(pointer, MEMORY_TYPE_POINT)]; }
    region              readRegion              (int pointer) { return memoryRegion             [getMemoryBlockAddress(pointer, MEMORY_TYPE_REGION)]; }
    sound               readSound               (int pointer) { return memorySound              [getMemoryBlockAddress(pointer, MEMORY_TYPE_SOUND)]; }
    soundlink           readSoundlink           (int pointer) { return memorySoundlink          [getMemoryBlockAddress(pointer, MEMORY_TYPE_SOUNDLINK)]; }
    string              readString              (int pointer) { return memoryString             [getMemoryBlockAddress(pointer, MEMORY_TYPE_STRING)]; }
    text                readText                (int pointer) { return memoryText               [getMemoryBlockAddress(pointer, MEMORY_TYPE_TEXT)]; }
    timer               readTimer               (int pointer) { return memoryTimer              [getMemoryBlockAddress(pointer, MEMORY_TYPE_TIMER)]; }
    transmissionsource  readTransmissionsource  (int pointer) { return memoryTransmissionsource [getMemoryBlockAddress(pointer, MEMORY_TYPE_TRANSMISSIONSOURCE)]; }
    trigger             readTrigger             (int pointer) { return memoryTrigger            [getMemoryBlockAddress(pointer, MEMORY_TYPE_TRIGGER)]; }
    unit                readUnit                (int pointer) { return memoryUnit               [getMemoryBlockAddress(pointer, MEMORY_TYPE_UNIT)]; }
    unitfilter          readUnitfilter          (int pointer) { return memoryUnitfilter         [getMemoryBlockAddress(pointer, MEMORY_TYPE_UNITFILTER)]; }
    unitgroup           readUnitgroup           (int pointer) { return memoryUnitgroup          [getMemoryBlockAddress(pointer, MEMORY_TYPE_UNITGROUP)]; }
    unitref             readUnitref             (int pointer) { return memoryUnitref            [getMemoryBlockAddress(pointer, MEMORY_TYPE_UNITREF)]; }
    revealer            readRevealer            (int pointer) { return memoryRevealer           [getMemoryBlockAddress(pointer, MEMORY_TYPE_REVEALER)]; }
    wave                readWave                (int pointer) { return memoryWave               [getMemoryBlockAddress(pointer, MEMORY_TYPE_WAVE)]; }
    waveinfo            readWaveinfo            (int pointer) { return memoryWaveinfo           [getMemoryBlockAddress(pointer, MEMORY_TYPE_WAVEINFO)]; }
    wavetarget          readWavetarget          (int pointer) { return memoryWavetarget         [getMemoryBlockAddress(pointer, MEMORY_TYPE_WAVETARGET)]; }
    funcref<delegate>   readDelegate            (int pointer) { return memoryDelegate           [getMemoryBlockAddress(pointer, MEMORY_TYPE_DELEGATE)]; }

    void writeAbilcmd               (int pointer, abilcmd value)            { memoryAbilcmd             [getMemoryBlockAddress(pointer, MEMORY_TYPE_ABILCMD)]            = value; }
    void writeAifilter              (int pointer, aifilter value)           { memoryAifilter            [getMemoryBlockAddress(pointer, MEMORY_TYPE_AIFILTER)]           = value; }
    void writeActor                 (int pointer, actor value)              { memoryActor               [getMemoryBlockAddress(pointer, MEMORY_TYPE_ACTOR)]              = value; }
    void writeBool                  (int pointer, bool value)               { memoryBool                [getMemoryBlockAddress(pointer, MEMORY_TYPE_BOOL)]               = value; }
    void writeBank                  (int pointer, bank value)               { memoryBank                [getMemoryBlockAddress(pointer, MEMORY_TYPE_BANK)]               = value; }
    void writeByte                  (int pointer, byte value)               { memoryByte                [getMemoryBlockAddress(pointer, MEMORY_TYPE_BYTE)]               = value; }
    void writeCamerainfo            (int pointer, camerainfo value)         { memoryCamerainfo          [getMemoryBlockAddress(pointer, MEMORY_TYPE_CAMERAINFO)]         = value; }
    void writeColor                 (int pointer, color value)              { memoryColor               [getMemoryBlockAddress(pointer, MEMORY_TYPE_COLOR)]              = value; }
    void writeDoodad                (int pointer, doodad value)             { memoryDoodad              [getMemoryBlockAddress(pointer, MEMORY_TYPE_DOODAD)]             = value; }
    void writeFixed                 (int pointer, fixed value)              { memoryFixed               [getMemoryBlockAddress(pointer, MEMORY_TYPE_FIXED)]              = value; }
    void writeInt                   (int pointer, int value)                { memoryInt                 [getMemoryBlockAddress(pointer, MEMORY_TYPE_INT)]                = value; }
    void writeMarker                (int pointer, marker value)             { memoryMarker              [getMemoryBlockAddress(pointer, MEMORY_TYPE_MARKER)]             = value; }
    void writeOrder                 (int pointer, order value)              { memoryOrder               [getMemoryBlockAddress(pointer, MEMORY_TYPE_ORDER)]              = value; }
    void writePlayergroup           (int pointer, playergroup value)        { memoryPlayergroup         [getMemoryBlockAddress(pointer, MEMORY_TYPE_PLAYERGROUP)]        = value; }
    void writePoint                 (int pointer, point value)              { memoryPoint               [getMemoryBlockAddress(pointer, MEMORY_TYPE_POINT)]              = value; }
    void writeRegion                (int pointer, region value)             { memoryRegion              [getMemoryBlockAddress(pointer, MEMORY_TYPE_REGION)]             = value; }
    void writeSound                 (int pointer, sound value)              { memorySound               [getMemoryBlockAddress(pointer, MEMORY_TYPE_SOUND)]              = value; }
    void writeSoundlink             (int pointer, soundlink value)          { memorySoundlink           [getMemoryBlockAddress(pointer, MEMORY_TYPE_SOUNDLINK)]          = value; }
    void writeString                (int pointer, string value)             { memoryString              [getMemoryBlockAddress(pointer, MEMORY_TYPE_STRING)]             = value; }
    void writeText                  (int pointer, text value)               { memoryText                [getMemoryBlockAddress(pointer, MEMORY_TYPE_TEXT)]               = value; }
    void writeTimer                 (int pointer, timer value)              { memoryTimer               [getMemoryBlockAddress(pointer, MEMORY_TYPE_TIMER)]              = value; }
    void writeTransmissionsource    (int pointer, transmissionsource value) { memoryTransmissionsource  [getMemoryBlockAddress(pointer, MEMORY_TYPE_TRANSMISSIONSOURCE)] = value; }
    void writeTrigger               (int pointer, trigger value)            { memoryTrigger             [getMemoryBlockAddress(pointer, MEMORY_TYPE_TRIGGER)]            = value; }
    void writeUnit                  (int pointer, unit value)               { memoryUnit                [getMemoryBlockAddress(pointer, MEMORY_TYPE_UNIT)]               = value; }
    void writeUnitfilter            (int pointer, unitfilter value)         { memoryUnitfilter          [getMemoryBlockAddress(pointer, MEMORY_TYPE_UNITFILTER)]         = value; }
    void writeUnitgroup             (int pointer, unitgroup value)          { memoryUnitgroup           [getMemoryBlockAddress(pointer, MEMORY_TYPE_UNITGROUP)]          = value; }
    void writeUnitref               (int pointer, unitref value)            { memoryUnitref             [getMemoryBlockAddress(pointer, MEMORY_TYPE_UNITREF)]            = value; }
    void writeRevealer              (int pointer, revealer value)           { memoryRevealer            [getMemoryBlockAddress(pointer, MEMORY_TYPE_REVEALER)]           = value; }
    void writeWave                  (int pointer, wave value)               { memoryWave                [getMemoryBlockAddress(pointer, MEMORY_TYPE_WAVE)]               = value; }
    void writeWaveinfo              (int pointer, waveinfo value)           { memoryWaveinfo            [getMemoryBlockAddress(pointer, MEMORY_TYPE_WAVEINFO)]           = value; }
    void writeWavetarget            (int pointer, wavetarget value)         { memoryWavetarget          [getMemoryBlockAddress(pointer, MEMORY_TYPE_WAVETARGET)]         = value; }
    void writeDelegate              (int pointer, funcref<delegate> value)  { memoryDelegate            [getMemoryBlockAddress(pointer, MEMORY_TYPE_DELEGATE)]           = value; }

//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - free memory
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
    static int[MEMORY_TYPE_COUNT] releasedMemory;
	
	static void initializeHeaps() {
		int memoryType = 0;
		
		while (memoryType < MEMORY_TYPE_COUNT) {
			heapInsert(memoryTypeStartAddress[memoryType], memoryTypeSize[memoryType], memoryTypeName[memoryType], memoryTypeStartAddress[memoryType], 0);
			releasedMemory[memoryType] = memoryTypeSize[memoryType];
		
			memoryType = memoryType + 1;
		} //while
	}

//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - memory allocation
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
    int allocate(int size, int memoryType) {
        int pointer;
        int memorySize;
		
		if (!systemEnabled) {
			return 0/0;
		} //if

        if (memoryType < 0 || memoryType >= MEMORY_TYPE_COUNT) {
            TriggerDebugOutput(1, StringToText("ALLOCATE FAILURE: ATTEMPT TO ALLOCATE INVALID MEMORY TYPE: (") + IntToText(memoryType) + StringToText(")"), false);
			systemEnabled = false;
            return 0/0;
        } //if
		
		pointer = heapGetFirst(memoryTypeName[memoryType]);
		if (pointer < memoryTypeStartAddress[memoryType] || pointer >= memoryTypeStartAddress[memoryType] + memoryTypeSize[memoryType]) {
			TriggerDebugOutput(1, StringToText("ALLOCATION HEAP CORRUPTION: (") + StringToText(memoryTypeName[memoryType]) + StringToText(")"), false);
			TriggerDebugOutput(1, IntToText(pointer), false);
			systemEnabled = false;
			return 0/0;
        } //if
		
		memorySize = heapGetWeight(pointer);
		
        if (memorySize < size) {
			TriggerDebugOutput(1, StringToText("ALLOCATE FAILURE: (") + StringToText(memoryTypeName[memoryType]) + StringToText(")"), false);
			systemEnabled = false;
			return 0/0;
        } //if
		
		if (memorySize == size) {
			heapRemove(pointer, memoryTypeName[memoryType]);
		} //if
		else {
			heapChangeWeight(pointer, memorySize - size, memoryTypeName[memoryType]);
			pointer = pointer + memorySize - size;
		} //else

		releasedMemory[memoryType] = releasedMemory[memoryType] - size;
		setSize(pointer, size);
		
        return pointer;
    } //allocate
	
	void deallocateEx(int pointer, int memoryType) {
		int size;
		
		if (!systemEnabled) {
			size = 0/0;
		} //if
		
		if (memoryType == MEMORY_TYPE_INVALID) {
            TriggerDebugOutput(1, StringToText("ATTEMPT TO DEALLOCATE OUT OF BOUNDS POINTER: (") + IntToText(pointer) + StringToText(")"), false);
			systemEnabled = false;
            size = 0/0;
        } //if
		
		size = sizeof(pointer);
		if (size == 0) {
            TriggerDebugOutput(1, StringToText("ATTEMPT TO DEALLOCATE NULL POINTER: (") + StringToText(memoryTypeName[memoryType]) + StringToText(") (") + IntToText(pointer) + StringToText(")"), false);
			systemEnabled = false;
            size = 0/0;
        } //if
		
		setSize(pointer, 0);

		heapInsert(pointer, size, memoryTypeName[memoryType], memoryTypeStartAddress[memoryType], memoryTypeStartAddress[memoryType] + memoryTypeSize[memoryType] - 1);
		
        releasedMemory[memoryType] = releasedMemory[memoryType] + size;
	} //deallocateEx

    void deallocate(int pointer) {
        deallocateEx(pointer, getMemoryType(pointer));
    } //deallocate
	
//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - debug
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
int getRemainingMemory			(int memoryType) { return releasedMemory[memoryType]; }
int getBiggestAllocBlock		(int memoryType) { return heapGetWeight(heapGetFirst(memoryTypeName[memoryType])); }
void printMemoryRemaining       (int memoryType) { TriggerDebugOutput(1, StringToText("Memory Remaining (") + StringToText(memoryTypeName[memoryType]) + StringToText("): ") + IntToText(getRemainingMemory(memoryType)), false); }
void printMemoryUsed            (int memoryType) { TriggerDebugOutput(1, StringToText("Memory Usage (") + StringToText(memoryTypeName[memoryType]) + StringToText("): ") + IntToText(memoryTypeSize[memoryType] - releasedMemory[memoryType]), false); }
void printMemoryUsedPercent     (int memoryType) { TriggerDebugOutput(1, StringToText("Memory Usage (") + StringToText(memoryTypeName[memoryType]) + StringToText("): ") + FixedToText(IntToFixed(memoryTypeSize[memoryType] - releasedMemory[memoryType])/IntToFixed(memoryTypeSize[memoryType])*100, 2) + StringToText("%"), false); }
void printHeapSize              (int memoryType) { TriggerDebugOutput(1, StringToText("Heap Size (") + StringToText(memoryTypeName[memoryType]) + StringToText("): ") + IntToText(heapGetSize(memoryTypeName[memoryType])), false); }

//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  - initialization
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
    void initializeMemoryAllocation() {
            initializeMemoryTypeAddresses();
            initializeHeaps();
    } //initializeMemoryAllocation