//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  Memory Types
//
    const int MEMORY_TYPE_COUNT                 = 32;

    const int MEMORY_TYPE_INVALID               = -1;
    const int MEMORY_TYPE_ABILCMD               = 0;        //abilcmd
    const int MEMORY_TYPE_AIFILTER              = 1;        //aifilter
    const int MEMORY_TYPE_ACTOR                 = 2;        //actor
    const int MEMORY_TYPE_BOOL                  = 3;        //bool
    const int MEMORY_TYPE_BANK                  = 4;        //bank
    const int MEMORY_TYPE_BYTE                  = 5;        //byte
    const int MEMORY_TYPE_CAMERAINFO            = 6;        //camerainfo
    const int MEMORY_TYPE_COLOR                 = 7;        //color
    const int MEMORY_TYPE_DOODAD                = 8;        //doodad
    const int MEMORY_TYPE_FIXED                 = 9;        //fixed
    const int MEMORY_TYPE_INT                   = 10;       //int
    const int MEMORY_TYPE_MARKER                = 11;       //marker
    const int MEMORY_TYPE_ORDER                 = 12;       //order
    const int MEMORY_TYPE_PLAYERGROUP           = 13;       //playergroup
    const int MEMORY_TYPE_POINT                 = 14;       //point
    const int MEMORY_TYPE_REGION                = 15;       //region
    const int MEMORY_TYPE_SOUND                 = 16;       //sound
    const int MEMORY_TYPE_SOUNDLINK             = 17;       //soundlink
    const int MEMORY_TYPE_STRING                = 18;       //string
    const int MEMORY_TYPE_TEXT                  = 19;       //text
    const int MEMORY_TYPE_TIMER                 = 20;       //timer
    const int MEMORY_TYPE_TRANSMISSIONSOURCE    = 21;       //transmissionsource
    const int MEMORY_TYPE_TRIGGER               = 22;       //trigger
    const int MEMORY_TYPE_UNIT                  = 23;       //unit
    const int MEMORY_TYPE_UNITFILTER            = 24;       //unitfilter
    const int MEMORY_TYPE_UNITGROUP             = 25;       //unitgroup
    const int MEMORY_TYPE_UNITREF               = 26;       //unitref
    const int MEMORY_TYPE_REVEALER              = 27;       //revealer
    const int MEMORY_TYPE_WAVE                  = 28;       //wave
    const int MEMORY_TYPE_WAVEINFO              = 29;       //waveinfo
    const int MEMORY_TYPE_WAVETARGET            = 30;       //wavetarget
    const int MEMORY_TYPE_DELEGATE              = 31;       int delegate(int data);
    
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  Pointer Functions
//
        int getMemoryType(int pointer);
//
//          retrieves memory type
//
//              O(1 + Log(MEMORY_TYPE_COUNT)/Log(2))
//
        int sizeof  (int pointer);
//
//          retrieves array size. Size of 1 is scalar.
//
        int getMemoryBlockAddress(int pointer, int memoryType);
//
//          used to manipulate memory arrays directly
//
        int getPointerAddress(int memoryBlockAddress, int memoryType);
//
//          convert memory block address back to a pointer
//
        abilcmd             readAbilcmd             (int pointer);
        aifilter            readAifilter            (int pointer);
        actor               readActor               (int pointer);
        bool                readBool                (int pointer);
        bank                readBank                (int pointer);
        byte                readByte                (int pointer);
        camerainfo          readCamerainfo          (int pointer);
        color               readColor               (int pointer);
        doodad              readDoodad              (int pointer);
        fixed               readFixed               (int pointer);
        int                 readInt                 (int pointer);
        marker              readMarker              (int pointer);
        order               readOrder               (int pointer);
        playergroup         readPlayergroup         (int pointer);
        point               readPoint               (int pointer);
        region              readRegion              (int pointer);
        sound               readSound               (int pointer);
        soundlink           readSoundlink           (int pointer);
        string              readString              (int pointer);
        text                readText                (int pointer);
        timer               readTimer               (int pointer);
        transmissionsource  readTransmissionsource  (int pointer);
        trigger             readTrigger             (int pointer);
        unit                readUnit                (int pointer);
        unitfilter          readUnitfilter          (int pointer);
        unitgroup           readUnitgroup           (int pointer);
        unitref             readUnitref             (int pointer);
        revealer            readRevealer            (int pointer);
        wave                readWave                (int pointer);
        waveinfo            readWaveinfo            (int pointer);
        wavetarget          readWavetarget          (int pointer);
        funcref<delegate>   readDelegate            (int pointer);
//
        void writeAbilcmd               (int pointer, abilcmd value);
        void writeAifilter              (int pointer, aifilter value);
        void writeActor                 (int pointer, actor value);
        void writeBool                  (int pointer, bool value);
        void writeBank                  (int pointer, bank value);
        void writeByte                  (int pointer, byte value);
        void writeCamerainfo            (int pointer, camerainfo value);
        void writeColor                 (int pointer, color value);
        void writeDoodad                (int pointer, doodad value);
        void writeFixed                 (int pointer, fixed value);
        void writeInt                   (int pointer, int value);
        void writeMarker                (int pointer, marker value);
        void writeOrder                 (int pointer, order value);
        void writePlayergroup           (int pointer, playergroup value);
        void writePoint                 (int pointer, point value);
        void writeRegion                (int pointer, region value);
        void writeSound                 (int pointer, sound value);
        void writeSoundlink             (int pointer, soundlink value);
        void writeString                (int pointer, string value);
        void writeText                  (int pointer, text value);
        void writeTimer                 (int pointer, timer value);
        void writeTransmissionsource    (int pointer, transmissionsource value);
        void writeTrigger               (int pointer, trigger value);
        void writeUnit                  (int pointer, unit value);
        void writeUnitfilter            (int pointer, unitfilter value);
        void writeUnitgroup             (int pointer, unitgroup value);
        void writeUnitref               (int pointer, unitref value);
        void writeRevealer              (int pointer, revealer value);
        void writeWave                  (int pointer, wave value);
        void writeWaveinfo              (int pointer, waveinfo value);
        void writeWavetarget            (int pointer, wavetarget value);
        void writeDelegate              (int pointer, funcref<delegate> value);
        
//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  memory sizes
//
//  -   min memory size: 8
//
//  -   must be in powers of 2
//
//          8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144
//
    const int MEMORY_SIZE_ABILCMD                = 128;      //abilcmd
    const int MEMORY_SIZE_AIFILTER               = 128;      //aifilter
    const int MEMORY_SIZE_ACTOR                  = 2048;     //actor
    const int MEMORY_SIZE_BOOL                   = 1024;     //bool
    const int MEMORY_SIZE_BANK                   = 32;       //bank
    const int MEMORY_SIZE_BYTE                   = 1024;     //byte
    const int MEMORY_SIZE_CAMERAINFO             = 128;      //camerainfo
    const int MEMORY_SIZE_COLOR                  = 256;      //color
    const int MEMORY_SIZE_DOODAD                 = 1024;     //doodad
    const int MEMORY_SIZE_FIXED                  = 8192;     //fixed
    const int MEMORY_SIZE_INT                    = 16384;    //int
    const int MEMORY_SIZE_MARKER                 = 512;      //marker
    const int MEMORY_SIZE_ORDER                  = 512;      //order
    const int MEMORY_SIZE_PLAYERGROUP            = 32;       //playergroup
    const int MEMORY_SIZE_POINT                  = 512;      //point
    const int MEMORY_SIZE_REGION                 = 256;      //region
    const int MEMORY_SIZE_SOUND                  = 128;      //sound
    const int MEMORY_SIZE_SOUNDLINK              = 128;      //soundlink
    const int MEMORY_SIZE_STRING                 = 512;      //string
    const int MEMORY_SIZE_TEXT                   = 512;      //text
    const int MEMORY_SIZE_TIMER                  = 256;      //timer
    const int MEMORY_SIZE_TRANSMISSIONSOURCE     = 64;       //transmissionsource
    const int MEMORY_SIZE_TRIGGER                = 512;      //trigger
    const int MEMORY_SIZE_UNIT                   = 2048;     //unit
    const int MEMORY_SIZE_UNITFILTER             = 128;      //unitfilter
    const int MEMORY_SIZE_UNITGROUP              = 512;      //unitgroup
    const int MEMORY_SIZE_UNITREF                = 1024;     //unitref
    const int MEMORY_SIZE_REVEALER               = 128;      //revealer
    const int MEMORY_SIZE_WAVE                   = 64;       //wave
    const int MEMORY_SIZE_WAVEINFO               = 64;       //waveinfo
    const int MEMORY_SIZE_WAVETARGET             = 64;       //wavetarget
    const int MEMORY_SIZE_DELEGATE               = 1024;     //funcref<delegate>
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  Memory arrays
//
//      Use getMemoryBlockAddress(pointer) to retrieve pointer to manipulate these. Keep in mind that no information can be retrieved
//      from a memory block address.
//
    abilcmd[MEMORY_SIZE_ABILCMD]                        memoryAbilcmd;              //abilcmd
    aifilter[MEMORY_SIZE_AIFILTER]                      memoryAifilter;             //aifilter
    actor[MEMORY_SIZE_ACTOR]                            memoryActor;                //actor
    bool[MEMORY_SIZE_BOOL]                              memoryBool;                 //bool
    bank[MEMORY_SIZE_BANK]                              memoryBank;                 //bank
    byte[MEMORY_SIZE_BYTE]                              memoryByte;                 //byte
    camerainfo[MEMORY_SIZE_CAMERAINFO]                  memoryCamerainfo;           //camerainfo
    color[MEMORY_SIZE_COLOR]                            memoryColor;                //color
    doodad[MEMORY_SIZE_DOODAD]                          memoryDoodad;               //doodad
    fixed[MEMORY_SIZE_FIXED]                            memoryFixed;                //fixed
    int[MEMORY_SIZE_INT]                                memoryInt;                  //int
    marker[MEMORY_SIZE_MARKER]                          memoryMarker;               //marker
    order[MEMORY_SIZE_ORDER]                            memoryOrder;                //order
    playergroup[MEMORY_SIZE_PLAYERGROUP]                memoryPlayergroup;          //playergroup
    point[MEMORY_SIZE_POINT]                            memoryPoint;                //point
    region[MEMORY_SIZE_REGION]                          memoryRegion;               //region
    sound[MEMORY_SIZE_SOUND]                            memorySound;                //sound
    soundlink[MEMORY_SIZE_SOUNDLINK]                    memorySoundlink;            //soundlink
    string[MEMORY_SIZE_STRING]                          memoryString;               //string
    text[MEMORY_SIZE_TEXT]                              memoryText;                 //text
    timer[MEMORY_SIZE_TIMER]                            memoryTimer;                //timer
    transmissionsource[MEMORY_SIZE_TRANSMISSIONSOURCE]  memoryTransmissionsource;   //transmissionsource
    trigger[MEMORY_SIZE_TRIGGER]                        memoryTrigger;              //trigger
    unit[MEMORY_SIZE_UNIT]                              memoryUnit;                 //unit
    unitfilter[MEMORY_SIZE_UNITFILTER]                  memoryUnitfilter;           //unitfilter
    unitgroup[MEMORY_SIZE_UNITGROUP]                    memoryUnitgroup;            //unitgroup
    unitref[MEMORY_SIZE_UNITREF]                        memoryUnitref;              //unitref
    revealer[MEMORY_SIZE_REVEALER]                      memoryRevealer;             //revealer
    wave[MEMORY_SIZE_WAVE]                              memoryWave;                 //wave
    waveinfo[MEMORY_SIZE_WAVEINFO]                      memoryWaveinfo;             //waveinfo
    wavetarget[MEMORY_SIZE_WAVETARGET]                  memoryWavetarget;           //wavetarget
    funcref<delegate>[MEMORY_SIZE_DELEGATE]             memoryDelegate;             //delegate
//
//------------------------------------------------------------------------------------------------------------------------------------------------------
//
//  Functions
//
        int allocate(int size, int memoryType);
        void deallocate(int pointer);
        void deallocateEx(int pointer, int memoryType);
//
//
//                            DEBUG
//      ---------------------------------------------------------
        int getRemainingMemory          (int memoryType);
//
//          retrieve free memory
//
        int getBiggestAllocBlock        (int memoryType);
//
//          retrieves the size of the biggest
//          array that can be allocated without overflowing
//
//          this is usually not equal to free memory as the heap
//          is likely fragmented
//
        void printMemoryRemaining       (int memoryType);
//
//          prints remaining memory
//
        void printMemoryUsed            (int memoryType);
//
//          prints used memory
//
        void printMemoryUsedPercent     (int memoryType);
//
//          prints remaining memory as percent
//
        void printHeapSize              (int memoryType);
//
//          prints the heap's current size (number of sequences)
//          the larger this number, the more fragmented the heap is